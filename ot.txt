- 1, 2일차 수업이 매우 중요하다. 그러니까, 모르겠으면 다시보기 꼭 해라.
- 라이브 한 번에 모든 것을 받아쓰고 이해하려 하면 안 된다.
- 라이브 수강 시 이론적인 필기보다는 코드 중심으로 따라가야 한다.
- 반드시 다시보기 여러 번 하면서 반복해서 정리해야 한다.

which python : 현재 사용중인 python 환경 조회
pip list : 현재 사용 중인 python 환경에 설치된 패키지 확인



package : 설치 후 반드시 pip freeze > requirement.txt 로 패키지 목록을 정리해주기

- django
pip install django : 장고 설치

- QuerySet API
pip install ipython : ipython 설치
pip install django-extensions : 장고 익스텐션 설치. ( 이후 settings.py의 INSTALLED_APPS 안에 django_extensions 를 적어줘야 함.)



가상 환경을 만드는 이유?
환경을 통일하여 프로젝트를 진행하기 위해서 가상 환경을 만듦. 즉, 독립적인 환경을 구성하기 위해서.
즉, 환경을 통일하기 위해 가상 환경의 설정을 저장해서 그 설정까지 공유해야 함.

pip freeze > requirements.txt : requirements.txt 파일을 venv 폴더 바깥에 만들어 현재 pip 정보를 저장. 
pip install -r requirements.txt : requirements.txt 파일을 읽어 똑같은 버전의 pip 를 설치.

grep -nir {프로젝트 이름} : 내 프로젝트 내에 사용된 모든 {프로젝트 이름} 찾기.



작동하지 않을 때 해결 방법
1. 저장하기
2. 오타 확인
3. 목쌤 호출



건드려야 할 파일
1. views.py (해당하는 html과 연결하는 함수)
2. urls.py (views 의 함수를 불러오는 path 를 작성. 각 path 와 app_name 을 설정할 수 있음)
3. models.py (database 작성을 위해 class 를 설정. 수정 후 makemigration - migrate 를 통해 저장해야 함)
4. admin.py (관리자 화면에서 db 를 받아오기 위해 register 하는 파일)
5. settings.py (앱을 만들어서, INSTALL_APPS의 최상단에 작성해야 앱이 기동함)
6. 각종 html. 특히, 해당 폴더 최상단에 templates 폴더를 만들어서 base.html 을 작성하면 모든 html 의 기초를 만들 수 있음.

url - view - template 순으로 건드리기.



settings.py 의 INSTALLED_APPS 밑에 적어야 하는 것들
1. 직접 생성한 앱 (최상단)
2. 설치한 앱 (3rd party library, 1번과 2번 사이)
3. 내장 앱 (기본적으로 적혀있는 것들. 하단)



명령어 순서

0. 가상 환경 설정
python -m venv venv : 가상 환경 생성
source venv/Script/activate : 가상 환경 실행

1. django 설치
0. 이 진행된 상태에서...
pip install -r requirement.txt : 폴더 최상단의 requirement.txt 파일을 읽어 해당하는 pip 설치.
requirement.txt 가 없다면 pip install django 로 설치.

2. 프로젝트 생성
django-admin startproject [프로젝트명] . : [프로젝트명] 을 이름으로 하는 프로젝트를 해당 폴더에 제작.

3. 서버 실행
python manage.py runserver : 서버 실행.

4. 앱 생성
python manage.py startapp [앱명] : [앱명] 을 이름으로 하는 앱을 생성.
이후, settings.py 의 INSTALLED_APPS 의 최상단에 '앱명' 기입.
반드시 앱을 생성 후 앱명을 기입해야 하고, trailing comma 반드시 잊지 말 것.

5. 마이그레이션
python manage.py makemigrations : model class 를 기반으로 설계도 작성.
python manage.py migrate : 작성된 설계도를 DB에 전달하여 반영.

6. 관리자 계정 생성
python manage.py createsuperuser : 관리자 계정 생성.
username: 알아서 적기
email address: 스킵 가능
password: 당장은 작성해도 아무것도 안 보이지만, 작성되고 있는 게 맞음. 작성 후 넘어가기.
password(again): 같은거 한 번 더.
red alert: bypass password validation 에 y 를 입력함으로써 스킵할 수 있음.



error:
NoReverseMatch: url 문제.

html에서 input 에 name이 없다면 인식이 안 된다. 반드시 적어줄 것.
input 의 타입이 submit 이어야 전송 가능.